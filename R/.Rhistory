#numerical variable
ggplot(penguins, aes(x = body_mass_g)) +
geom_histogram(binwidth = 200)
#density plot
ggplot(penguins, aes(x = body_mass_g)) +
geom_density()
#> Warning: Removed 2 rows containing non-finite values (`stat_density()`).
#boxplots
ggplot(penguins, aes(x = species, y = body_mass_g)) +
geom_boxplot()
#denityplot
ggplot(penguins, aes(x = body_mass_g, color = species)) +
geom_density(linewidth = 0.75)
ggplot(penguins, aes(x = body_mass_g, color = species,fill=species)) +
geom_density(alpha = 0.5)
ggplot(penguins, aes(x = island, fill = species)) +
geom_bar()
ggplot(penguins, aes(x = island, fill = species)) +
geom_bar(position = "fill")
ggplot(penguins, aes(x = island, fill = species)) +
geom_bar(position = "fill")
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point()
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(color= species,shape=island)
ggplot(penguins, aes(x = species)) +
geom_bar()
#inorder
ggplot(penguins, aes(x = fct_infreq(species))) +
geom_bar()
ggplot(penguins, aes(x = flipper_length_mm,
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(color= species,shape=island)
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color= species,shape=island))
#facet wrap-single variable
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species, shape = species)) +
facet_wrap(~island)
library(tidyverse)
mpg
ggplot(mpg, aes(x = displ, y = hwy, color = class)) +
geom_point()
ggplot(mpg, aes(x = displ, y = hwy, shape = class)) +
geom_point()
ggplot(mpg, aes(x = displ, y = hwy, size = class)) +
geom_point()
ggplot(mpg, aes(x = displ, y = hwy, alpha = class)) +
geom_point()
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(color = "blue")
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point()
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_smooth()
ggplot(mpg, aes(x = displ, y = hwy, shape = drv)) +
geom_smooth()
ggplot(mpg, aes(x = displ, y = hwy, linetype = drv)) +
geom_smooth()
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_smooth()
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_smooth(aes(group = drv))
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_smooth(aes(color = drv), show.legend = FALSE)
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = class)) +
geom_smooth()
ggplot(mpg, aes(x = hwy)) +
geom_histogram(binwidth = 2)
ggplot(mpg, aes(x = hwy)) +
geom_density()
ggplot(mpg, aes(x = hwy)) +
geom_boxplot()
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
facet_wrap(~cyl)
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
facet_grid(drv ~ cyl)
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
facet_grid(drv ~ cyl, scales = "free_y")
diamonds
ggplot(diamonds, aes(x = cut)) +
geom_bar()
diamonds |>
count(cut) |>
ggplot(aes(x = cut, y = n)) +
geom_bar(stat = "identity")
diamonds |>
count(cut) |>
ggplot(aes(x = cut, y = n)) +
geom_bar(stat = "identity")
ggplot(diamonds, aes(x = cut, y = after_stat(prop), group = 1)) +
geom_bar()
ggplot(diamonds) +
stat_summary(
aes(x = cut, y = depth),
fun.min = min,
fun.max = max,
fun = median
)
ggplot(mpg, aes(x = drv, color = drv)) +
geom_bar()
# Right
ggplot(mpg, aes(x = drv, fill = drv)) +
geom_bar()
ggplot(mpg, aes(x = drv, fill = class)) +
geom_bar()
ggplot(mpg, aes(x = drv, fill = class)) +
geom_bar(alpha = 1/5, position = "identity")
# Right
ggplot(mpg, aes(x = drv, color = class)) +
geom_bar(fill = NA, position = "identity")
ggplot(diamonds, aes(x = carat)) +
geom_histogram(binwidth = 0.5)
library(tidyverse)
library(tidyverse)
data = read.csv("D:\sassi kiran\abcd.csv")
data = read.csv("D:/sassi kiran/abcd.csv")
library(plyr)
data<-read.csv("D:/sassi kiran/rstudio.csv")
View(data)
data<-read.csv("D:/sassi kiran/abcd.csv")
data<-read.csv("D:/sassi kiran/abcd.csv")
data <- read.csv("D:/sassi kiran/abcd.csv")
data <- read.csv("D:/sassi kiran/abcd.csv")
View(data)
data = subset(data,select = c(-X,-X.1,-X.2,-X.3,-X.4,-X.5))
data = na.omit(data)
head(data)
ggplot(data=data,aes(Downtime,Productivity))+
geom_point()
index <- round(0.75*nrow(data))
index
index <- sample(1:n, index, replace = FALSE)
data_train = data[1:index,]
data_test = data[index:nrow(data),]
data_test_og = subset(data_test,select = -Productivity)
model <- lm(Productivity ~ Downtime, data = data_train)
summary(model)
predictions_test <- predict(model, newdata = data_test_og)
predictions_test
true_values = data_test$Productivity
rmse <- sqrt(mean((predictions_test - true_values)^2))
rmse
# Creating a simple dataset
data <- data.frame(
name = c("Alice", "Bob", "Charlie", "David", "Eva"),
age = c(18, 20, NA, 19, 21),
gender = c("F", "M", "M", "M", "F"),
math_score = c(85, 90, 88, NA, 92),
english_score = c(89, 92, NA, 85, 90)
)
# Print the original dataset
print("Original Dataset:")
print(data)
#handling missing values
# Filling missing age with mean age
data$age[is.na(data$age)] <- mean(data$age, na.rm = TRUE)
# Filling missing math scores with mean math score
data$math_score[is.na(data$math_score)] <- mean(data$math_score, na.rm = TRUE)
# Print dataset after filling missing values
print("Dataset after filling missing values:")
print(data)
#dealing with categorical variable
# Convert gender to one-hot encoded columns
encoded_gender <- model.matrix(~ gender - 1, data = data)
data <- cbind(data, encoded_gender)
# Remove the original gender column
data <- data[, -which(names(data) %in% c("gender"))]
# Print dataset after one-hot encoding
print("Dataset after one-hot encoding gender:")
print(data)
library(tidyverse) # today's package
library(gapminder) # data set
install.packages("gapminder")
library(gapminder) # data set
library(gapminder) # data set
head(gapminder, 15)
gapminder %>%
filter(country == "India")
gapminder %>%
filter(country == "India", year < 1975)
gapminder %>%
filter(country=="India" | country == "Nepal")
gapminder %>%
select (country, continent, year, pop) %>%
mutate(cont_code = case_when(continent == "Africa" ~ 1,
continent == "Americas" ~ 2,
continent == "Asia" ~ 3,
continent == "Europe" ~ 4,
TRUE ~ 5))
head(ggplot2::mpg)
ggplot(data=mpg)+
aes(x=displ)+
aes(y=hwy)+
geom_point()
library(gapminder) # dataset
library(tidyverse) # data wrangling
install.packages("here")
library(here) # file path
install.packages("gtsummary")
library(gtsummary) # summary statistics tables
install.packages("flextable")
library(flextable) # saving tables as word file
install.packages("flextable")
library(flextable)
install.packages("flextable")
gapminder %>%
filter(country == "India",
year > 1980) %>%
select(year, pop, lifeExp ) %>%
knitr::kable() # print in table format
gapminder %>%
select(-country) %>% # drop country variable
tbl_summary()
install.packages("janitor")
library(here)
??geom_smooth()
# Creating a simple dataset
data <- data.frame(
name = c("Alice", "Bob", "Charlie", "David", "Eva"),
age = c(18, 20, NA, 19, 21),
gender = c("F", "M", "M", "M", "F"),
math_score = c(85, 90, 88, NA, 92),
english_score = c(89, 92, NA, 85, 90)
)
# Print the original dataset
print("Original Dataset:")
print(data)
#handling missing values
# Filling missing age with mean age
data$age[is.na(data$age)] <- mean(data$age, na.rm = TRUE)
# Filling missing math scores with mean math score
data$math_score[is.na(data$math_score)] <- mean(data$math_score, na.rm = TRUE)
# Print dataset after filling missing values
print("Dataset after filling missing values:")
print(data)
variable <- 10
xvar <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) # or 0:10
yvar <- seq(10, 0, by = -1)
dataframe <- data.frame(x = xvar, y = yvar)
# measures of central tendancy and dispersion
sum(xvar)
mean(xvar) # or average
x <- var(xvar)
sqrt(x)
sd(xvar)
quantile(xvar, 0.45) # or percentile
# for importing a file: File -> Import Dataset ->
# from text(readr) (for csv) | from excel (for xlsx) -> Browse ->
# copy the code and paste it in the editor
# Data Transformations ----------------------------------------------------
# install.packages('tidyverse'), if you haven't installed it yet
library(tidyverse)
library(nycflights13)
means(df$var)
means(df$var)
print(flights) # prints data column-wise
glimpse(flights) # prints data row-wise(better for looking at all columns)
# row operations
head(flights,100)
filter(df,conditions)
flights %>% # %>% (pipe operator) Ctrl + Shift + M
filter(dep_delay > 120 & sched_dep_time < 1000 | month == 2)
View(flights %>%
filter(month %in% c(1, 2)))
flights %>%
arrange(month)
flights %>%
arrange(desc(day))
flights %>%
arrange(dep_time, sched_dep_time)
flights %>%
distinct(day)
flights %>%
distinct(month, .keep_all = TRUE) %>% # chaining
arrange(month)
flights %>%
count(origin, dest, sort = TRUE)
?flights # help, documentation
?mutate
flights %>%
mutate(
year = factor(year),
month = as.character(month), # as.double, as.numeric
dep_time = parse_number(month) # converts string to integers
# takes only the first set of numbers
)
flights %>%
select(year, month, day)
View(flights %>%
select(!year:day))
flights %>%
select(where(is.character)) # is.numeric, is.factor
flights %>%
select(starts_with("a")) # column names
flights %>%
select(ends_with("y"))
flights %>%
select(contains("delay"))
View(flights %>%
rename(tail_num = tailnum)) # new value = old value
View(flights %>%
relocate(time_hour, air_time))
# group operations
flights %>%
group_by(month) %>%
summarize(
avg_delay = mean(dep_delay, na.rm = TRUE),
n = n()
)
flights %>%
group_by(month) %>%
count(month, sort = TRUE)
library(tidyverse)
hdi <- read.csv("D:/Code/data_analysis/R-Programing/R-Programing/hdi-cpi (1).csv",
stringsAsFactors = FALSE)
library(readxl)
abcd_csv <- read_excel("D:/sassi kiran/abcd.csv.xls")
View(abcd_csv)
library(readxl)
exam <- read_excel("D:/sassi kiran/exam.csv")
library(tidyverse)
library(tidyverse)
data<-read.csv("D:/sassi kiran/weather_sample.csv")
View(data)
install.packages("rlang")
install.packages("tidymoles")
install.packages("rlang")
install.packages("rlang")
install.packages("modelr")
install.packages("rlang")
install.packages("rlang")
library(tidymoles)
View(data)
subset_data<-
select(HOURLYRelativeHumidity,HOURLYDRYBULBTEMPF,HOURLEYPrecip,HOURLEYWindSpeed,HOURLEYStationPressure)
subset_data<-
select(data$HOURLYRelativeHumidity,data$HOURLYDRYBULBTEMPF,data$HOURLEYPrecip,data$HOURLEYWindSpeed,data$HOURLEYStationPressure)
View(data)
subset_data|>
select(data$HOURLYRelativeHumidity,data$HOURLYDRYBULBTEMPF,data$HOURLEYPrecip,data$HOURLEYWindSpeed,data$HOURLEYStationPressure)
subset_data|>
select(data$HOURLYRelativeHumidity,data$HOURLYDRYBULBTEMPF,data$HOURLEYPrecip,data$HOURLEYWindSpeed,data$HOURLEYStationPressure,na.rm = True)
glimpse(data)
HOURLEYRelativeHumidity<-as.numeric(HOURLEYRelativeHumidity)
HOURLYRelativeHumidity<-as.numeric(HOURLYRelativeHumidity)
data$HOURLYRelativeHumidity[na.omit(data$HOURLYRelativeHumidity)]
glimpse(data)
data$HOURLYPrecip[na.omit(data$HOURLYPrecip)]
glimpse(data)
data|>
rename(HOURLYRelativeHumidity=relative_humidity)
View(data)
library(dplyr)
data|>
rename(HOURLYRelativeHumidity=relative_humidity)
str(data)
head(data)
dataframe<-head(data)
dplyr::rename(HOURLYRelativeHumidity=relative_humidity)
dplyr::rename("HOURLYRelativeHumidity=relative_humidity")
index <- round(0.75*nrow(data))
index
index <- sample(1:n, index, replace = FALSE)
??subset.data.frame
??na.omit()
na.omit(data,cols="HOURLYPrecip")
glimpse(data)
??datapreprocessing
str_remove(data$HOURLYPrecip,pattern="s$")
cleaned_data<-na.omit(data)
View(cleaned_data)
str_remove(cleaned_data$HOURLYPrecip,pattern="s$")
cleaned_data|>
rename(HOURLYRelativeHumidity=relative_humidity)
index<-round(0.75*nrow(data))
index
index <- sample(1:n, index, replace = FALSE)
index<-round(0.8*nrow(data))
index
index<-round(0.8*nrow(data))
index
data_train=cleaned_data[1:4582,]
data_test=cleaned_data[4582:5727,]
View(data_train)
View(data_test)
data_train=cleaned_data[1:4582,]
data_test=cleaned_data[4582:5727,]
View(data_train)
View(data_test)
data_test=cleaned_data[4583:5727,]
View(data_train)
View(data_test)
index<-round(0.8*nrow(cleaned_data))
index
data_train=cleaned_data[1:3055,]
data_test=cleaned_data[3056:5727,]
View(data_train)
View(data_test)
getwd()
library(readxl)
abcd_csv <- read_excel("D:/sassi kiran/abcd.csv.xls")
View(abcd_csv)
getwd()
library(readxl)
abcd_csv <- read_excel("D:/sassi kiran/abcd.csv.xls")
View(abcd_csv)
library(readxl)
titanic_1_1_ <- read_excel("D:/sassi kiran/titanic (1) (1).csv")
install.packages("caTools")
library(readr)
library(readr)
Computer_Data <- read_csv("D:/sassi kiran/Computer_Data.csv")
View(Computer_Data)
library(readr)
Computer_Data <- read_csv("D:/sassi kiran/Computer_Data.csv")
View(Computer_Data)
install.packages("caTools")
libray(caTools)
library(caTools)
library(plyr)
data<-read.csv("file.csv")
data <- read_xlsx("D:/sassi kiran/file.csv")
data <- read_csv("D:/sassi kiran/file.csv")
library(readxl)
library(dplyr)
library(ggplot2)
data <- read.csv("D:/sassi kiran/file.csv")
data
# Count the occurrences of each unique value in the data
count_result <- data %>%
group_by(Truck_Model_Sold) %>%
tally()
# Arrange the data based on the count in descending order
count_result_sorted <- count_result %>%
arrange(desc(n))
# Print the results
print("Count of each unique value:")
print(count_result_sorted)
# Plot the bar plot with count
ggplot(count_result_sorted, aes(x = reorder(Truck_Model_Sold, -n), y = n)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Count of each unique value",
x = "Truck Model Sold",
y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
# Calculate the relative frequency of each unique value
count_result <- data %>%
group_by(Truck_Model_Sold) %>%
tally()
freq_dis<-count(data)
View(freq_dis)
library(readxl)
library(dplyr)
library(ggplot2)
data <- read.csv("D:/sassi kiran/file.csv")
data
freq_dis<-count(data)
View(freq_dis)
freq_dis$rel_freq<-freq_dis$freq/sum(freq_dis$freq)
freq_dis<-count(data)
View(freq_dis)
freq_dis$rel_freq<-freq_dis$freq/sum(freq_dis$freq)
library(readxl)
library(dplyr)
library(ggplot2)
data <- read.csv("D:/sassi kiran/file.csv")
data
# Count the occurrences of each unique value in the data
count_result <- data %>%
group_by(Truck_Model_Sold) %>%
tally()
View(data)
# Count the occurrences of each unique value in the data
count_result <- data %>%
group_by(Truck_Model_Sold) %>%
tally()
library(readr)
library(readr)
Computer_Data <- read_csv("D:/sassi kiran/Computer_Data.csv")
View(Computer_Data)
library(caTools)
library(readr)
Compdata <- read_csv("D:/sassi kiran/Computer_Data.csv")
View(Compdata)
table(compdata$screen)
library(readr)
compdata <- read_csv("D:/sassi kiran/Computer_Data.csv")
View(compdata)
table(compdata$screen)
table(compdata$ram)
setwd("C:/Users/siyona/OneDrive/Desktop/R")
library(tidyverse)
library(tidyverse)
df=read.csv('titanic.csv')
View(df)
df1=drop_na(df)
View(df1)
ggplot(df1,aes(x=fare fill='sex'))+
ggplot(df1,aes(x=fare,fill='sex'))+
geom_histogram(binwidth = 10, color = "black", fill = "orange", alpha = 0.6) +
labs(title = "Histogram of relative humidity")
ggplot(df1,aes(x=Fare,fill='sex'))+
geom_histogram(binwidth = 10, color = "black", fill = "orange", alpha = 0.6) +
labs(title = "Histogram of relative humidity")
ggplot(df1,aes(x=Fare,fill='sex'))+
geom_bar()
